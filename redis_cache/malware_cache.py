from typing import Union

from fastuuid import uuid4

from components import NSFBF, TokenFilter
from .base import Redis


class MalwareCache:
    # c: (cache)
    # |- c:m (malware file cache)
    # |  |- c:m:{lang}:{func_id}:code   certain lang of the malware code (unused)
    # |  |- c:m:{lang}:{func_id}:token  malware token (unused)
    # |  |- c:m:{lang}:{func_id}:ast    malware ast
    # |  |- c:m:{lang}:{func_id}:meta   malware meta
    # |- c:nsfbf
    # |  |- c:nsfbf:{lang}              certain lang of the nsfbf pickled file
    # |- c:token
    # |  |- c:token:{lang}         stores token filter

    def __init__(self, r: Redis):
        self.r = r

    @staticmethod
    def malware_key(lang, func_id, content):
        return f"c:m:{lang}:{func_id}:{content}"

    # For initialization
    def insert_malware(self, lang: str, meta: dict, syntax_seq: list) -> str:
        uuid = "v050702" + "_" + str(uuid4())
        self.r.save_pickle(self.malware_key(lang, uuid, "meta"), meta)
        self.r.save_pickle(self.malware_key(lang, uuid, "syntax_seq"), syntax_seq)
        return uuid

    def load_malware_meta(self, lang: str, func_id: str) -> dict:
        return self.r.load_pickle(self.malware_key(lang, func_id, "meta"))

    def load_malware_syntax_seq(self, lang: str, func_id: str) -> list:
        return self.r.load_pickle(self.malware_key(lang, func_id, "syntax_seq"))

    def save_nsfbf(self, lang: str, nsfbf: NSFBF):
        self.r.save_pickle(f"c:nsfbf:{lang}", nsfbf)

    def load_nsfbf(self, lang: str) -> Union[NSFBF, None]:
        return self.r.load_pickle(f"c:nsfbf:{lang}")

    def save_token_filter(self, lang: str, tf: TokenFilter):
        self.r.save_pickle(f"c:token:{lang}", tf)

    def load_token_filter(self, lang: str) -> (Union[TokenFilter, None]):
        token_filter = self.r.load_pickle(f"c:token:{lang}")
        return token_filter

    # clear all the cache
    def clear_cache(self):
        delete_keys = list(self.r.load_all_prefix_key("c"))
        if len(delete_keys) != 0:
            self.r.con.delete(*delete_keys)

    def set_threshold(self, threshold_type: str, threshold: float):
        self.r.save_pickle(f"c:threshold:{threshold_type}", threshold)

    def load_threshold(self, threshold_type: str) -> float:
        return self.r.load_pickle(f"c:threshold:{threshold_type}")
